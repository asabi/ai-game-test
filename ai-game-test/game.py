#!/usr/bin/env python3
"""
Game Application
Generated by AI Developer

Task: Create a simple number guessing game
"""

import random
import time
import os
from dotenv import load_dotenv

class Game:
    def __init__(self):
        # Load environment variables from .env file
        load_dotenv()
        self.min_attempts = int(os.getenv('MIN_ATTEMPTS', 1))
        self.max_attempts = int(os.getenv('MAX_ATTEMPTS', 10))

        self.score = 0
        self.level = 1
        self.game_over = False
        self.target_number = None
        self.max_attempts_selected = None

    def start_game(self):
        """Start the game"""
        print("Welcome to the Number Guessing Game!")
        print("Try to guess the number between 1 and 100.")

        # Ask player for number of attempts with validation
        while self.max_attempts_selected is None:
            try:
                max_attempts_input = input(f"How many guesses would you like per level? (between {self.min_attempts} and {self.max_attempts}): ")
                self.max_attempts_selected = int(max_attempts_input)

                if self.max_attempts_selected < self.min_attempts or self.max_attempts_selected > self.max_attempts:
                    print(f"Please enter a number between {self.min_attempts} and {self.max_attempts}.")
                    self.max_attempts_selected = None
            except ValueError:
                print("Invalid input. Please enter a valid number.")

        print(f"You have selected {self.max_attempts_selected} guesses per level.")
        self.game_loop()

    def game_loop(self):
        """Main game loop"""
        while not self.game_over:
            self.new_level()
            self.update()
            self.render()
            time.sleep(0.1)

    def new_level(self):
        """Start a new level with a new target number"""
        self.target_number = random.randint(1, 100)
        print(f"\n--- Level {self.level} ---")
        print("Guess the number between 1 and 100.")

    def update(self):
        """Update game state by getting user input and checking guesses"""
        attempts = 0
        while attempts < self.max_attempts_selected:
            try:
                guess = int(input(f"Attempt {attempts+1}/{self.max_attempts_selected}: Enter your guess: "))

                if guess < 1 or guess > 100:
                    print("Please enter a number between 1 and 100.")
                    continue

                attempts += 1

                if guess < self.target_number:
                    print("Too low!")
                elif guess > self.target_number:
                    print("Too high!")
                else:
                    print(f"Correct! You've guessed the number {self.target_number}.")
                    self.score += (self.max_attempts_selected - attempts + 1) * 10
                    self.level += 1
                    return

                if attempts == self.max_attempts_selected:
                    print(f"Out of attempts! The number was {self.target_number}.")

            except ValueError:
                print("Invalid input. Please enter a valid number.")

        # Ask if the player wants to continue after running out of attempts
        play_again = input("Do you want to try the next level? (yes/no): ").strip().lower()
        if play_again not in ['yes', 'y']:
            self.end_game()

    def render(self):
        """Render the game state"""
        print(f"\nCurrent Score: {self.score}")
        print(f"Level: {self.level}")

    def end_game(self):
        """End the game"""
        self.game_over = True
        print(f"\nGame Over! Final Score: {self.score}")
        print("Thanks for playing!")

if __name__ == "__main__":
    game = Game()
    game.start_game()